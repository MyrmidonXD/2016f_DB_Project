options{  static = true;  DEBUG_PARSER = false;  IGNORE_CASE = true;}PARSER_BEGIN(SimpleDBMSParser)// importsimport java.util.*;/* My Custom Classes *///import MyInterpreter;//import DBType;public class SimpleDBMSParser{  public static final int PRINT_SYNTAX_ERROR = 0;  public static final int PRINT_CREATE_TABLE = 1;  public static final int PRINT_DROP_TABLE 	 = 2;  public static final int PRINT_DESC         = 3;  public static final int PRINT_SHOW_TABLES  = 4;  public static final int PRINT_SELECT		 = 5;  public static final int PRINT_INSERT		 = 6;  public static final int PRINT_DELETE		 = 7;    public static void main(String args[]) throws ParseException  {    MyInterpreter interpreter = MyInterpreter.getInstance();        SimpleDBMSParser parser = new SimpleDBMSParser(System.in);    System.out.print("DB_2014-11111> ");    while (true)    {      try      {        parser.command();      }      catch (Throwable e)      {        printMessage(PRINT_SYNTAX_ERROR);        SimpleDBMSParser.ReInit(System.in);      }    }  }  public static void printMessage(int q)  {        switch(q)    {      case PRINT_SYNTAX_ERROR:      	System.out.println("Syntax error");      	break;      /*      case PRINT_CREATE_TABLE:      	System.out.println("\'CREATE TABLE\' requested");      	break;  	  case PRINT_DROP_TABLE:      	System.out.println("\'DROP TABLE\' requested");      	break;      case PRINT_DESC:      	System.out.println("\'DESC\' requested");      	break;      case PRINT_SHOW_TABLES:      	System.out.println("\'SHOW TABLES\' requested");      	break;      case PRINT_SELECT:      	System.out.println("\'SELECT\' requested");      	break;      case PRINT_INSERT:      	System.out.println("\'INSERT\' requested");      	break;      case PRINT_DELETE:      	System.out.println("\'DELETE\' requested");      	break;      */    }        System.out.print("DB_2014-11111> ");  }}PARSER_END(SimpleDBMSParser)SKIP : { " " | "\r" | "\t" | "\n" }TOKEN : /* Keywords */{  < EXIT : "exit" >| < INT : "int" >| < CHAR : "char" >| < DATE : "date" >| < CREATE : "create" >| < TABLE : "table" >| < NOT  : "not" >| < NULL : "null" >| < PRIMARY : "primary" >| < FOREIGN : "foreign" >| < KEY : "key" >| < REFERENCES : "references" >| < DROP : "drop" > /* Keywords for [3. DROP TABLE / DESC / SHOW TABLES] */| < DESC : "desc" >| < SHOW : "show" >| < TABLES : "tables" >| < SELECT : "select" > /* Keywords for [4. SELECT ] */| < FROM : "from" >| < AS : "as" >| < WHERE : "where" >| < IS : "is" >| < AND : "and" >| < OR : "or" >| < INSERT : "insert" > /* Keywords for [5. INSERT / DELETE] */| < INTO : "into" >| < VALUES : "values" >| < DELETE : "delete" >}TOKEN :{  < SEMICOLON : ";" >| < LEFT_PAREN : "(" >| < RIGHT_PAREN : ")" >| < COMMA : "," >| < UNDERSCORE : "_" >| < INT_VALUE : (< SIGN >)? (< DIGIT >)+>| < SIGN : "+" | "-" >| < DIGIT : [ "0"-"9" ] >| < LEGAL_IDENTIFIER : < ALPHABET > (< ALPHABET > | < UNDERSCORE >)* >| < ALPHABET : [ "a"-"z", "A"-"Z" ] >| < PERIOD : "." >| < ASTERISK : "*" >| < COMP_OP : "<" | ">" | "=" | ">=" | "<=" | "!=" >| < DATE_VALUE : < NNNN > "-" < NN > "-" < NN > >| < NNNN : < DIGIT > < DIGIT > < DIGIT > < DIGIT > >| < NN : < DIGIT > < DIGIT > >| < QUOTE : "'" >| < NON_QUOTE_SPECIAL_CHARACTERS : [ "!", "@", "#", "$", "%", "^", "&", "*", "(", ")", "-", "_", "+", "=", "|", "\\", "`", "~", ":", ";", "?", "/", ">", "<", ".", ",",  "{", "}", "[", "]" ] >| < NON_QUOTE_CHARACTER : < DIGIT > | < ALPHABET > | < NON_QUOTE_SPECIAL_CHARACTERS > | " " >| < CHAR_STRING : < QUOTE > (< NON_QUOTE_CHARACTER >)* < QUOTE > > }void command() :{}{  queryList()| (    < EXIT >    < SEMICOLON >    (	    {	      MyInterpreter.getInstance().terminate();	      System.exit(0);	    }  	)  ) }void queryList() :{  int q;}{  (    q = query()    < SEMICOLON >    {      printMessage(q);    }  )+}int query() :{  int q;}{  (    createTableQuery()    {      q = PRINT_CREATE_TABLE;    }  | dropTableQuery()  	{  	  q = PRINT_DROP_TABLE;  	}  | descQuery()    {      q = PRINT_DESC;    }  | showTablesQuery()    {      q = PRINT_SHOW_TABLES;    }  | selectQuery()  	{  	  q = PRINT_SELECT;  	}  | insertQuery()  	{  	  q = PRINT_INSERT;  	}  | deleteQuery()  	{  	  q = PRINT_DELETE;  	}  )  (    {      return q;    }  )}void createTableQuery() :{  String _tableName;  MyInterpreter.getInstance().createTable_Initialize();}{  < CREATE >  < TABLE >  _tableName = tableName()  tableElementList()  (    {      try {       	MyInterpreter.getInstance().createTable(_tableName);      }      catch(DBError e)      {        System.out.println(e.getMessage());      }    }  )}void tableElementList() :{}{  < LEFT_PAREN >  tableElement()  (    < COMMA >    tableElement()  )*  < RIGHT_PAREN >}void tableElement() :{}{  columnDefinition()| tableConstraintDefinition()}void columnDefinition() :{  String colName;  String typeStr;  int typeVal;  DBType dbType;  boolean isNotNull = false;}{  colName = columnName()  dbType = dataType()  (    < NOT >    < NULL >    (      {        isNotNull = true;      }    )  )?  (    {      if(dbType.type == DBType.DBTypeSpecifier.DB_INT) {       	typeStr = "int";      	typeVal = -1;      }      else if(dbType.type == DBType.DBTypeSpecifier.DB_DATE) {        typeStr = "date";        typeVal = -1;      }      else {        typeStr = "char";        typeVal = dbType.length;      }      MyInterpreter.getInstance().createTable_EnqueueColumn(colName, typeStr, typeVal, isNotNull);    }  )}void tableConstraintDefinition() :{}{  primaryKeyConstraint()| referentialConstraint()}void primaryKeyConstraint() :{  ArrayList<String> colList;}{  < PRIMARY >  < KEY >   colList= columnNameList()  (    {      MyInterpreter.getInstance().createTable_EnqueuePK(colList);    }  )}void referentialConstraint() :{  ArrayList<String> refingColList;  String refedTableName;  ArrayList<String> refedColList;}{  < FOREIGN >  < KEY >  refingColList = columnNameList()  < REFERENCES >  refedTableName = tableName()  refedColList = columnNameList()  (    {      MyInterpreter.getInstance().createTable_EnqueueFK(refingColList, refedTableName, refedColList);    }  )}ArrayList<String> columnNameList() :{  ArrayList<String> _colNameList = new ArrayList<String>();  String _nextColumn;}{  < LEFT_PAREN >  _nextColumn = columnName()  (    {       _colNameList.add(_nextColumn);  	}  )  (    < COMMA >    _nextColumn = columnName()    (      {     	_colNameList.add(_nextColumn);      }  	)  )*  < RIGHT_PAREN >  (    {      return _colNameList;    }  )}DBType dataType() :{  Token _t;  DBType _dt;}{  (  	  < INT >	  (	    {	      _dt = new DBType("int");      	    }	  )	|	  (	    < CHAR >	    < LEFT_PAREN >	    _t = < INT_VALUE >	    < RIGHT_PAREN >	  )	  (	    {	      _dt = new DBType("char", Integer.parseInt(_t.toString()));	    }	  )	|	  < DATE >	  (	    {	      _dt = new DBType("date");	    }	  )  )  (    {      return _dt;    }  )}String tableName() :{  Token _tableName;}{  _tableName = < LEGAL_IDENTIFIER >  (    {      return _tableName.toString().toLowerCase();          }  )}String columnName() :{  Token _colName;}{  _colName = < LEGAL_IDENTIFIER >  (    {      return _colName.toString().toLowerCase();          }  )}//--------- [ 3. DROP TABLE / DESC / SHOW TABLES ] ---------//void dropTableQuery() :{  String _tableName;}{  < DROP >  < TABLE >  _tableName = tableName()  (    {      try {        MyInterpreter.getInstance().dropTable(_tableName);      }      catch (DBError e) {        System.out.println(e.getMessage());      }    }  )}void descQuery() :{}{  < DESC >  tableName()}void showTablesQuery() :{}{  < SHOW >  < TABLES >}//--------- [ 4. SELECT ] ---------//void selectQuery() :{}{  < SELECT >  selectList()  tableExpression()}void selectList() :{}{  < ASTERISK >| (    selectedColumn()    (      < COMMA >      selectedColumn()    )*  )}void selectedColumn() :{}{  (    LOOKAHEAD(2)    tableName()    < PERIOD >  )?  columnName()  (    < AS >    columnName()  )?}void tableExpression() :{}{  fromClause()  (    whereClause()  )?}void fromClause() :{}{  < FROM >  tableReferenceList()}void tableReferenceList() :{}{  referedTable()  (    < COMMA >    referedTable()  )*}void referedTable() :{}{  tableName()  (    < AS >    tableName()  )?}void whereClause() :{}{  < WHERE >  booleanValueExpression()}void booleanValueExpression() :{}{  booleanTerm()  (    < OR >    booleanTerm()  )*}void booleanTerm() :{}{  booleanFactor()  (    < AND >    booleanFactor()  )*}void booleanFactor() :{}{  (    < NOT >  )?  booleanTest()}void booleanTest() :{}{  predicate()| parenthesizedBooleanExpression()}void parenthesizedBooleanExpression() :{}{  < LEFT_PAREN >  booleanValueExpression()  < RIGHT_PAREN >}void predicate() :{}{  LOOKAHEAD(4)  comparisonPredicate()| LOOKAHEAD(4)  nullPredicate()}void comparisonPredicate() :{}{  compOperand()  < COMP_OP >  compOperand()}void compOperand() :{}{  comparableValue()|(  	LOOKAHEAD(2)  	tableName()  	< PERIOD > )? columnName()}void comparableValue() :{}{  < INT_VALUE >| < CHAR_STRING >| < DATE_VALUE >}void nullPredicate() :{}{  (    LOOKAHEAD(2)    tableName()    < PERIOD >  )?  columnName()  nullOperation()}void nullOperation() :{}{  < IS >  (    < NOT >  )?  < NULL >}//--------- [ 5. INSERT / DELETE ] ---------//void insertQuery() :{}{  < INSERT >  < INTO >  tableName()  insertColumnsAndSource()}void insertColumnsAndSource() :{}{  (    columnNameList()  )?  valueList()}void valueList() :{}{  < VALUES >  < LEFT_PAREN >  value()  (    < COMMA >    value()  )*  < RIGHT_PAREN >}void value() :{}{  < NULL >| comparableValue()}void deleteQuery() :{}{  < DELETE >  < FROM >  tableName()  (    whereClause()  )?}